
let bgm = null;
let prevScene = "";

let gameConfig = {
    course: "", order: "", type: ""
};
let prevGameConfig = {
    course: "", order: "", type: ""
};

let isPC = true;
let otehonCanvas = null;
let drawingCanvas = null;
let sokki = null;

let mondaiList = [];

const nextMondaiInterval = 400;

let startTime = 0;
let nigateCountMap = null;
let renzokuMizzCount = 0;

let canClickResultBtn = false;

let isÂÖ®Êñádebug = false;

const app = {
    data() {
        return {
            scene: "top", // top, countdown, game, result
            needBgm: false,
            canClickBgmBtn: true,
            otehon: "„ÅÇ„Çä",
            sokkiTable: [],

            moon: "üåë",
            soundLoadSintyoku: "",
            countdownText: "3",

            mondaiListIndex: 0,
            mondai: [],
            kaitou: [],
            message: "Êõ∏„ÅÑ„Å¶„Å≠ü§î",

            hira: "",

            resultTitle: "",
            clearTime: 0,
            correctCount: 0,
            missCount: 0,
            nigate: "",
        };
    },
    created() {
        const mobileRegex = /iphone;|(android|nokia|blackberry|bb10;).+mobile|android.+fennec|opera.+mobi|windows phone|symbianos/i;
        const isMobileByUa = mobileRegex.test(navigator.userAgent);;
        const isMobileByClientHint = navigator.userAgentData && navigator.userAgentData.mobile;
        isPC = !isMobileByUa && !isMobileByClientHint;

        this.initSokkiTable();

        document.addEventListener("visibilitychange", () => {
            if (document.hidden) {
                bgm?.unload();
                bgm = null;
            } else {
                this.canClickBgmBtn = true;
                this.needBgm = false;
            }
        });

        window.addEventListener("popstate", () => {
            // ÈÄ≤„ÇÄ„Éú„Çø„É≥„ÅåÊäº„Åï„Çå„Åü„Å®„Åç
            if (this.scene === "top") {
                if (prevScene === "countdown" || prevScene === "game") {
                    this.startCountdown();
                }
                else if (prevScene === "result") {
                    this.scene = "result";
                }
            }
            // Êàª„Çã„Éú„Çø„É≥„ÅåÊäº„Åï„Çå„Åü„Å®„Åç
            else if (
                this.scene === "countdown" ||
                this.scene === "game" ||
                this.scene === "result"
            ) {
                this.scene = "top";
            }
        });

        const params = (new URL(window.location.href)).searchParams;
        isÂÖ®Êñádebug = params.has("d");
    },
    mounted() {
        // noop
    },
    watch: {
        scene(_, oldScene) {
            prevScene = oldScene;
        }
    },
    computed: {
        mondaiSintyoku() {
            return `${this.mondaiListIndex}/${mondaiList.length}`;
        },
        score() {
            const bunbo1 = this.clearTime / 1000 / 60;
            const bunbo2 = this.correctCount + this.missCount;
            if (bunbo1 === 0 || bunbo2 === 0) {
                return 0;
            }
            const s = this.correctCount / bunbo1 * Math.pow(this.correctCount / bunbo2, 3);
            return Math.floor(s * 100);
        },
        rank() {
            if (this.score >= 6000) {
                return "S";
            }
            else if (this.score >= 5000) {
                return "A+";
            }
            else if (this.score >= 4000) {
                return "A";
            }
            else if (this.score >= 3000) {
                return "B+";
            }
            else if (this.score >= 2000) {
                return "B";
            }
            else if (this.score >= 1000) {
                return "C+";
            }
            return "C";
        },
        displayClearTime() {
            const tmp = Math.round(this.clearTime / 1000 * 10);
            return tmp / 10;
        },
        hitomoji() {
            if (this.correctCount === 0) {
                return 0;
            }
            const tmp = Math.round(this.clearTime / 1000 / this.correctCount * 10);
            return tmp / 10;
        },
        seikakuritu() {
            const bunbo = this.correctCount + this.missCount;
            if (bunbo === 0) {
                return 0;
            }
            const tmp = Math.round(this.correctCount / bunbo * 100 * 10);
            return tmp / 10;
        },
    },
    methods: {
        onClickPlay(course, order, type) {
            console.log(course, order, type);
            history.pushState(null, "", "");
            gameConfig = {course, order, type};
            this.startCountdown();
        },

        onClickRetire() {
            history.back();
        },

        onMouseDown(e) {
            // Â∑¶„ÇØ„É™„ÉÉ„ÇØ‰ª•Â§ñÊèèÁîª‰∏çÂèØ
            if (e.buttons !== 1) {
                return;
            }
            this.canvasDrawStart(e.offsetX, e.offsetY);
        },
        onMouseUp(e) {
            this.canvasDrawEnd(e.offsetX, e.offsetY);
        },
        onMouseMove(e) {
            this.canvasDraw(e.offsetX, e.offsetY);
        },

        onTouchStart(e) {
            const {x, y} = this.getTouchXY(e);
            this.canvasDrawStart(x, y);
        },
        onTouchEnd(e) {
            const {x, y} = this.getTouchXY(e);
            this.canvasDrawEnd(x, y);
        },
        onTouchMove(e) {
            const {x, y} = this.getTouchXY(e);
            this.canvasDraw(x, y);
        },

        getTouchXY(e) {
            const rect = e.target.getBoundingClientRect();
            const x = e.changedTouches[0].clientX - rect.left;
            const y = e.changedTouches[0].clientY - rect.top;
            return {x, y};
        },

        canvasDrawStart(x, y) {
            drawingCanvas.drawStart();
            sokki = new Sokki(x, y);
        },

        canvasDrawEnd(x, y) {
            // Êó¢„Å´„ÇØ„É™„Ç¢„Åó„Å¶„ÅÑ„Çã„Å™„Çâ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
            if (this.mondaiListIndex >= mondaiList.length) {
                return;
            }

            if (!drawingCanvas.canDraw) {
                return;
            }

            sokki.changeLineColorIfNeed(this.$refs.sokkiCanvas, x, y);
            
            drawingCanvas.drawEnd(x, y, sokki.lineColor.hex);

            sokki.lastUpdate(x, y, this.hira);

            const isOK = sokki.test(this.hira);
            if (isOK || isÂÖ®Êñádebug) {
                okSound.play();
                this.correctCount++;
                renzokuMizzCount = 0;
                this.message = "Ê≠£Ëß£ÔºÅüòÜ";
                this.kaitou.push(ÈÄüË®òÊñáÂ≠ó‰∏ÄË¶ß[this.hira]);
                if (this.mondai.length === this.kaitou.length) {
                    this.mondaiListIndex++;
                    const isClear = this.mondaiListIndex >= mondaiList.length;
                    if (isClear) {
                        this.clearTime = performance.now() - startTime - nextMondaiInterval * (mondaiList.length - 1);
                    }
                    setTimeout(() => {
                        if (isClear) {
                            this.scene = "result";

                            let resultTitle = `${gameConfig.type}${gameConfig.course}`;
                            if (gameConfig.order !== "") {
                                resultTitle += `Ôºà${gameConfig.order}Ôºâ`;
                            }
                            this.resultTitle = resultTitle;

                            const nigateList = Array.from(nigateCountMap).sort((a, b) => b[1] - a[1]).map(a => a[0]);
                            if (nigateList.length === 0) {
                                this.nigate = "„Å™„ÅÑÔºÅ";
                            }
                            else {
                                this.nigate = nigateList.slice(0, 3).join(" ");
                            }

                            // „É™„Ç∂„É´„ÉàÁîªÈù¢„ÅÆ„Éú„Çø„É≥„ÇíÊÄù„Çè„Å¨ÂΩ¢„ÅßÊäº„Åó„Å¶„Åª„Åó„Åè„Å™„ÅÑ„Åü„ÇÅ
                            setTimeout(() => {
                                canClickResultBtn = true;
                            }, 800);
                        }
                        else {
                            this.initMondai();
                        }
                    }, nextMondaiInterval);
                }
                else {
                    this.hira = this.mondai[this.kaitou.length];
                    drawingCanvas.clear();
                    otehonCanvas.clear();
                    if (this.otehon === "„ÅÇ„Çä") {
                        otehonCanvas.draw(this.hira);
                    }
                }
            }
            else if (sokki.isEmpty()) {
                drawingCanvas.clear();
            }
            else {
                ngSound.play();
                this.missCount++;
                renzokuMizzCount++;
                this.message = "ÈÅï„ÅÜ‚Ä¶üò¢";
                drawingCanvas.clear();

                if (nigateCountMap.has(this.hira)) {
                    const missCount = nigateCountMap.get(this.hira);
                    nigateCountMap.set(this.hira, missCount + 1);
                }
                else {
                    nigateCountMap.set(this.hira, 1);
                }

                if (this.otehon === "„Å™„Åó" && renzokuMizzCount === 3) {
                    otehonCanvas.draw(this.hira);
                }
            }
        },

        canvasDraw(x, y) {
            if (!drawingCanvas.canDraw) {
                return;
            }

            sokki.changeLineColorIfNeed(this.$refs.sokkiCanvas, x, y);

            drawingCanvas.draw(x, y, sokki.lineColor.hex);

            sokki.update(x, y, this.hira);
        },

        onClickResultEnd() {
            if (!canClickResultBtn) {
                return;
            }
            history.back();
        },

        onClickResultTudukeru() {
            if (!canClickResultBtn) {
                return;
            }
            this.startCountdown(true);
        },

        onClickTweet() {
            if (!canClickResultBtn) {
                return;
            }

            const text = `„Å™„Åû„Å£„Å¶Ë¶ö„Åà„ÇãÊó©Á®≤Áî∞ÂºèÈÄüË®ò„Ç¢„Éó„É™„ÅÆ${this.resultTitle}„ÅäÊâãÊú¨${this.otehon}„Åß„É©„É≥„ÇØ„ÅØ„Äå${this.rank}„Äç„ÄÅ„Çπ„Ç≥„Ç¢„ÅØ„Äå${this.score}„Äç„Åß„Åó„Åü„ÄÇ`;

            const link = document.createElement("a");
            link.href = `https://twitter.com/intent/tweet?url=https://mogamoga1024.github.io/nazoru-sokki-game/&text=${encodeURIComponent(text)}&hashtags=${encodeURIComponent("Êó©Á®≤Áî∞ÂºèÈÄüË®ò")}`;
            link.target = "_blank";
            link.rel = "noopener noreferrer";
            link.click();
        },

        onClickBgm() {
            if (!this.canClickBgmBtn) {
                return;
            }
            this.needBgm = !this.needBgm;
            if (this.needBgm) {
                if (bgm === null) {
                    this.canClickBgmBtn = false;
                    const volume = isPC ? 0.3 : 0.18;
                    loadSound("asset/bgm.mp3", {loop: true, volume}).then(sound => {
                        bgm = sound;
                        // https://github.com/goldfire/howler.js/issues/1753
                        if (Howler.ctx.state === "suspended" || Howler.ctx.state === "interrupted") {
                            Howler.ctx.resume().then(() => {
                                bgm.play();
                                this.canClickBgmBtn = true;
                            });
                        }
                        else {
                            bgm.play();
                            this.canClickBgmBtn = true;
                        }
                    });
                }
                else {
                    bgm.play();
                }
            }
            else {
                bgm?.stop();
            }
        },

        initSokkiTable() {
            const hiraTable = [
                ["„ÅÇ", "„ÅÑ", "„ÅÜ", "„Åà", "„Åä"],
                ["„Åã", "„Åç", "„Åè", "„Åë", "„Åì"],
                ["„Åï", "„Åó", "„Åô", "„Åõ", "„Åù"],
                ["„Åü", "„Å°", "„Å§", "„Å¶", "„Å®"],
                ["„Å™", "„Å´", "„Å¨", "„Å≠", "„ÅÆ"],
                ["„ÅØ", "„Å≤", "„Åµ", "„Å∏", "„Åª"],
                ["„Åæ", "„Åø", "„ÇÄ", "„ÇÅ", "„ÇÇ"],
                ["„ÇÑ", "", "„ÇÜ", "", "„Çà"],
                ["„Çâ", "„Çä", "„Çã", "„Çå", "„Çç"],
                ["„Çè", "", "", "", ""],
                ["„Å±", "„Å¥", "„Å∑", "„Å∫", "„ÅΩ"],
                ["„Åç„ÇÉ", "", "„Åç„ÇÖ", "", "„Åç„Çá"],
                ["„Åó„ÇÉ", "", "„Åó„ÇÖ", "", "„Åó„Çá"],
                ["„Å°„ÇÉ", "", "„Å°„ÇÖ", "", "„Å°„Çá"],
                ["„Å´„ÇÉ", "", "„Å´„ÇÖ", "", "„Å´„Çá"],
                ["„Å≤„ÇÉ", "", "„Å≤„ÇÖ", "", "„Å≤„Çá"],
                ["„Åø„ÇÉ", "", "„Åø„ÇÖ", "", "„Åø„Çá"],
                ["„Çä„ÇÉ", "", "„Çä„ÇÖ", "", "„Çä„Çá"],
                ["„Å¥„ÇÉ", "", "„Å¥„ÇÖ", "", "„Å¥„Çá"],
            ];
    
            for (const hiraRow of hiraTable) {
                const sokkiRow = [];
                let pad = "";
                if (["„Åï", "„Åü", "„ÇÑ", "„Åó„ÇÉ"].includes(hiraRow[0])) {
                    pad = "top";
                }
                else if (["„ÅØ", "„Çâ", "„Å±", "„Å¥„ÇÉ"].includes(hiraRow[0])) {
                    pad = "bottom";
                }
                for (const hira of hiraRow) {
                    let sokki = "";
                    if (hira !== "") {
                        sokki = ÈÄüË®òÊñáÂ≠ó‰∏ÄË¶ß[hira];
                    }
                    sokkiRow.push({hira, sokki, pad});
                }
                this.sokkiTable.push(sokkiRow);
            }
        },

        async startCountdown() {
            this.scene = "countdown";

            const p = func => new Promise((resolve, reject) => {
                const start = performance.now();
                const checkTime = () => {
                    if (this.scene !== "countdown") {
                        reject(new Error("countdown‰∏≠„Å´scene„ÅåÂ§âÂåñ„Åó„Åü"));
                    }
                    else if (performance.now() - start >= 600) {
                        func();
                        resolve();
                    } else {
                        requestAnimationFrame(checkTime);
                    }
                };
                requestAnimationFrame(checkTime);
            });

            this.countdownText = "";
            const moons = ["üåë", "üåò", "üåó", "üåñ", "üåï", "üåî", "üåì", "üåí"];
            let moonIndex = 0;
            this.moon = moons[moonIndex];
            let lastTime = performance.now();
            const updateMoon = () => {
                const now = performance.now();
                if (this.countdownText !== "") {
                    return;
                }
                if (now - lastTime >= 100) {
                    lastTime = now;
                    moonIndex = (moonIndex + 1) % moons.length;
                    this.moon = moons[moonIndex];
                }
                requestAnimationFrame(updateMoon);
            };
            requestAnimationFrame(updateMoon);

            const {course, order, type} = gameConfig;
            const {course: prevCourse, order: prevOrder, type: prevType} = prevGameConfig;
            this.mondaiListIndex = 0;
            if (prevCourse === course && prevType === type && course === "Âü∫Á§é") {
                if (order === "„É©„É≥„ÉÄ„É†") {
                    shuffle(mondaiList);
                }
                else if (prevOrder === "„É©„É≥„ÉÄ„É†") {
                    mondaiList.sort((a, b) => a.id - b.id);
                }
            }
            else {
                // Èü≥Â£∞„ÅÆÈñãÊîæ
                for (const mondai of mondaiList) {
                    mondai.sound.unload();
                    mondai.sound = null;
                }
                mondaiList = []; // Ê¨°„ÅÆcreateMondaiListÈñ¢Êï∞ÂÜÖ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åô„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Åü„ÇÅÂøÖË¶Å
                mondaiList = await this.createMondaiList();
            }

            if (this.scene === "countdown") {
                prevGameConfig = {...gameConfig};
                this.countdownText = "3";
                await p(() => this.countdownText = "2");
                await p(() => this.countdownText = "1");
                await p(() => this.countdownText = "GO!");
                await p(() => this.startGame());
            }
        },

        async startGame() {
            this.scene = "game";
            
            // DOM„ÅÆCanvas„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„Å®initCanvas„Åå„Ç®„É©„Éº„Å´„Å™„Çã„Åü„ÇÅÂæÖ„Å§
            await this.$nextTick();

            this.initCanvas();
            this.initMondai();

            canClickResultBtn = false;
            this.correctCount = 0;
            this.missCount = 0;
            renzokuMizzCount = 0;
            this.clearTime = 0;
            startTime = performance.now();
            this.nigate = "";
            nigateCountMap = new Map();
        },

        initCanvas() {
            if (isPC) {
                // width, height„ÅØcss„Å®Âêà„Çè„Åõ„Çã
                this.$refs.otehonCanvas.width = 400;
                this.$refs.otehonCanvas.height = 250;
                this.$refs.sokkiCanvas.width = 400;
                this.$refs.sokkiCanvas.height = 250;
            }
            else {
                const clientWidth = document.body.clientWidth;
                const canvasWidth = Math.floor(clientWidth * 0.9);
                this.$refs.canvasContainer.style.width = `${canvasWidth}px`;
                this.$refs.otehonCanvas.style.width = `${canvasWidth}px`;
                this.$refs.sokkiCanvas.style.width = `${canvasWidth}px`;
                this.$refs.otehonCanvas.width = canvasWidth;
                this.$refs.otehonCanvas.height = 250;
                this.$refs.sokkiCanvas.width = canvasWidth;
                this.$refs.sokkiCanvas.height = 250;
            }
            otehonCanvas = new OtehonCanvas(this.$refs.otehonCanvas);
            drawingCanvas = new DrawingCanvas(this.$refs.sokkiCanvas);
        },

        async createMondaiList() {
            const {course, order, type} = gameConfig;

            let textList = [];
            const mondaiList = [];
            if (course === "Âü∫Á§é") {
                textList = Âπ≥‰ªÆÂêç‰∏ÄË¶ß(type);
            }
            else if (course === "ÂÆüË∑µ") {
                textList = ÂÆüË∑µÂïèÈ°åÊñá„É™„Çπ„ÉàÁîüÊàê(type === "ÂÖ®ÈÉ®");
            }

            // memoÔºö„Éá„Éê„Ç∞„ÅßÂïèÈ°å„Çí„ÉÜ„Ç≠„Éà„Éº„Å´‰Ωú„Çä„Åü„ÅÑ„Å®„Åç„ÅØ„ÄÅ„Åì„Åì„ÅßtextList„Çí„ÅÑ„Åò„Çã
            // textList = [
            //     "„ÅÇ",
            //     "„ÅÑ",
            //     "„ÅÜ",
            //     "„Åà",
            //     "„Åä"
            // ];

            if (isÂÖ®Êñádebug) {
                textList = „Éá„Éê„Ç∞ÂÖ®Âïè();
                this.mondaiListIndex = 0;
            }

            // Ë§áÊï∞„ÅÆmp3„Éï„Ç°„Ç§„É´„Çí‰∏ÄÂ∫¶„Å´„É™„ÇØ„Ç®„Çπ„Éà„Åô„Çã„ÅÆ„ÅØË≤†Ëç∑„Åå„Åã„Åã„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅPromise.all„ÅØ„Åó„Å™„ÅÑ
            this.soundLoadSintyoku = "Á©∫".repeat(textList.length);
            let loadResult = "";
            for (let i = 0; i < textList.length; i++) {
                const text = textList[i];
                const sound = await loadSound(`asset/Ë™≠„Åø‰∏ä„Åí/${text}.mp3`);
                const mondai = text2mondai(text, type !== "Ê∏ÖÈü≥" || isÂÖ®Êñádebug);
                mondaiList.push({id: i + 1, mondai, sound});
                
                loadResult += sound.isOk ? "ÂèØ" : "‰∏ç";
                this.soundLoadSintyoku = loadResult + "Á©∫".repeat(textList.length - (i + 1));

                if (this.scene !== "countdown") {
                    gameConfig = {course: "", order: "", type: ""};
                    prevGameConfig = {course: "", order: "", type: ""};
                    throw new Error("ÂïèÈ°åÁîüÊàê‰∏≠„Å´scene„ÅåÂ§âÂåñ„Åó„Åü");
                }
            }

            if (order === "„É©„É≥„ÉÄ„É†") {
                shuffle(mondaiList);
            }

            return mondaiList;
        },

        initMondai() {
            this.message = "Êõ∏„ÅÑ„Å¶„Å≠ü§î";
            this.kaitou = [];
            this.mondai = mondaiList[this.mondaiListIndex].mondai;
            this.hira = this.mondai[0];

            drawingCanvas.clear();
            otehonCanvas.clear();
            if (this.otehon === "„ÅÇ„Çä") {
                otehonCanvas.draw(this.hira);
            }

            const sound = mondaiList[this.mondaiListIndex].sound;
            sound.play();
        },
    }
};

Vue.createApp(app).mount("#app");
